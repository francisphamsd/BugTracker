@page  "/Report"
@attribute [Authorize]
@using BugTrackerUI.Components
@using BugTrackerUI.Models
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IBugData bugData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Report a Bug</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>
        @if (categories is not null)
           {
                <EditForm Model="bug" OnValidSubmit="ReportBug">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="input-section">
                        <label class="form-label fw-bold text-uppercase" for="bug-text">Bug</label>
                        <div class="input-description">Report any bugs or glitches here.</div>
                        <InputText class="form-control"  id="bug-text" @bind-Value="bug.Bug" />
                    </div>
                    <div>
                        <label for="category">Category</label>
                        <div class="input-description">Choose severity category.</div>
                        <div class="col-lg-8">
                            <MyInputRadioGroup id="category" @bind-Value="bug.CategoryId">
                                @foreach (var c in categories)
                                   {
                                        <div class="radio-item-group">
                                            <InputRadio Value="@c.Id" id="@c.Id" />
                                            <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                                         </div>
                                   }
                            </MyInputRadioGroup>
                        </div>
                    </div>
                    <div class="input-section">
                        <label class="form-label fw-bold text-uppercase" for="description">Description</label>
                        <div class="input-description">Briefly describe the bug or glitch</div>
                        <InputTextArea class="form-control" id="description" @bind-Value="bug.Description" />
                    </div>
                    <div class="center-children">
                        <button class="btn btn-main btn-lg text-uppercase" type="submit">Report</button>
                    </div>
                </EditForm>
           }
    </div>
</div>

@code {
    private ReportBugModel bug = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
         categories = await categoryData.GetAllCategories();

         // var authState = await authProvider.GetAuthenticationStateAsync();
         // string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
         // loggedInUser = await userData.GetUserFromAuthentication(objectId);
         loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private void ClosePage()
    {
         navManager.NavigateTo("/");
    }

    private async Task ReportBug()
    {
         BugModel b = new();
         b.Bug = bug.Bug;
         b.Description = bug.Description;
         b.Author = new BasicUserModel(loggedInUser);
         b.Category = categories.Where(c => c.Id == bug.CategoryId).FirstOrDefault();

         if (b.Category is null)
         {
              bug.CategoryId = "";
              return;
         }

         await bugData.ReportBug(b);
         bug = new();
         ClosePage();
    }
}

