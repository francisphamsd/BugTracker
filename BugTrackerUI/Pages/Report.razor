@page  "/Report"
@using BugTrackerUI.Components
@using BugTrackerUI.Models
@inject ICategoryData categoryData
@inject IBugData bugData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Report a Bug</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        @if (categories is not null)
           {

           }
    <EditForm Model="bug" OnValidSubmit="ReportBug">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="bug-text">Bug</label>
            <div>Report any bugs or glitches here.</div>
            <InputText id="bug-text" @bind-Value="bug.Bug" />
        </div>
        <div>
            <label for="category">Category</label>
            <div>Choose severity category.</div>
            <div>
                <MyInputRadioGroup id="category" @bind-Value="bug.CategoryId">
                    @foreach (var c in categories)
                     {
                          <div>
                                <InputRadio Value="@c.Id" id="@c.Id" />
                                <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                          </div>
                     }
                </MyInputRadioGroup>
            </div>
        </div>
        <div>
            <label for="description">Description</label>
            <div>Briefly describe the bug or glitch</div>
            <InputTextArea id="description" @bind-Value="bug.Description" />
        </div>
        <div>
            <button type="submit">Report</button>
        </div>
    </EditForm>
    </div>
</div>

@code {
    private ReportBugModel bug = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
         categories = await categoryData.GetAllCategories();

         //TODO - Replace with user lookup
         loggedInUser = await userData.GetUserFromAuthentication("abc-123");
    }

    private void ClosePage()
    {
         navManager.NavigateTo("/");
    }

    private async Task ReportBug()
    {
         BugModel b = new();
         b.Bug = bug.Bug;
         b.Description = bug.Description;
         b.Author = new BasicUserModel(loggedInUser);
         b.Category = categories.Where(c => c.Id == bug.CategoryId).FirstOrDefault();

         if (b.Category is null)
         {
              bug.CategoryId = "";
              return;
         }

         await bugData.ReportBug(b);
         bug = new();
         ClosePage();
    }
}

