@page "/AdminAcceptance"
@attribute [Authorize(Policy = "Admin")]
@inject IBugData bugData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Pending Submissions</h1>

<div class="row">
    <div class="bugs-count col-8 mt-2">@submissions?.Count Submissions</div>
    <div class="col-4 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

@if (submissions is not null)
   {
        foreach (var s in submissions)
        {
            <div class="row submission">
                <div class="col-lg-2 col-md-3 col-sm-4">
                    <button class="btn btn-accept" @onclick="(() => AcceptSubmission(s))">Accept</button>
                    <button class="btn btn-reject" @onclick="(() => RejectSubmission(s))">Reject</button>
                </div>
                <div class="col-lg-10 col-md-9 col-sm-8">
                    <div>
                        @if (currentEditingTitle == s.Id)
                           {
                                <EditForm class="acceptance-edit-form" Model="@editedTitle" OnSubmit="(() => SaveTitle(s))">
                                    <InputText class="form-control acceptance-edit-field" @bind-Value="editedTitle" />
                                    <button class="btn" type="submit">
                                        <span class="oi oi-check submission-edit-accept"></span>
                                    </button>
                                    <button class="btn" type="button" @onclick="(() => currentEditingTitle = string.Empty)">
                                        <span class="oi oi-x submission-edit-reject"></span>
                                    </button>
                                </EditForm>
                           }
                           else
                           {
                                @s.Bug
                                <span class="oi oi-pencil submission-edit-icon" @onclick="(() => EditTitle(s))"></span>
                           }
                    </div>
                    <div>
                        @s.Category.CategoryName
                    </div>
                    <div>
                        @s.Author.DisplayName
                    </div>
                    <div>
                        @if (currentEditingDescription == s.Id)
                           {
                                <EditForm class="acceptance-edit-form" Model="@editedDescription" OnSubmit="(() => SaveDescription(s))">
                                    <InputText class="form-control acceptance-edit-field" @bind-Value="editedDescription" />
                                    <button class="btn" type="submit">
                                        <span class="oi oi-check submission-edit-accept"></span>
                                    </button>
                                    <button class="btn" type="button" @onclick="(() => currentEditingDescription = string.Empty)">
                                        <span class="oi oi-x submission-edit-reject"></span>
                                    </button>
                                </EditForm>
                           }
                          else
                           {
                                @s.Description
                                <span class="oi oi-pencil submission-edit-icon" @onclick="(() => EditDescription(s))"></span>
                           }
                    </div>
                </div>
            </div>
        }
   }

@code {
    private List<BugModel> submissions;
    private BugModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submissions = await bugData.GetAllBugsWaitingForAcceptance();
    }

    private async Task AcceptSubmission(BugModel submission)
    {
        submission.AcceptedForRelease = true;
        submissions.Remove(submission);
        await bugData.UpdateBug(submission);
    }

    private async Task RejectSubmission(BugModel submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await bugData.UpdateBug(submission);
    }

    private void EditTitle(BugModel model)
    {
        editingModel = model;
        editedTitle = model.Bug;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(BugModel model)
    {
        currentEditingTitle = string.Empty;
        model.Bug = editedTitle;
        await bugData.UpdateBug(model);
    }

    private void EditDescription(BugModel model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingTitle = "";
        currentEditingDescription = model.Id;
    }

    private async Task SaveDescription(BugModel model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await bugData.UpdateBug(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}

