@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject IBugData bugData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Bug Reports</h1>
<div class="bug-container">
    <button @onclick="LoadReportPage" class="bug-btn btn btn-outline-dark btn-lg text-uppercase">Report</button>
</div>

<div class="row">
    <div class="bugs-count col-md-4 text-dark mt-2">@bugs?.Count Bugs</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text"
               placeholder="Search"
               aria-label="Search box"
               class="form-control rounded-control"
               @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
    <div class="col-12 d-block d-md-none">
        @if (categories is not null && showCategories)
           {
                <div class="categories">
                    <span class="text-uppercase fw-bold">Category</span>
                    <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
                    @foreach (var c in categories)
                        {
                            <div class="@GetSelectedCategory(c.CategoryName)"
                                @onclick="(() => OnCategoryClick(c.CategoryName))">
                                @c.CategoryName
                            </div>
                        }
                </div>
           }
          else
           {
                <div class="categories" @onclick="(() => showCategories = true)">
                    <span class="selected-category">@selectedCategory</span>
                </div>
           }

           @if (statuses is not null && showStatuses)
              {
                    <div class="statuses">
                        <span class="text-uppercase fw-bold">Status</span>
                        <div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
                        @foreach (var s in statuses)
                           {
                                <div class="@GetSelectedStatus(s.StatusName)"
                                    @onclick="(() => OnStatusClick(s.StatusName))">
                                    @s.StatusName
                                    </div>
                           }
                    </div>
              }
             else
              {
                    <div class="statuses" @onclick="(() => showStatuses = true)">
                        <span class="selected-status">@selectedStatus</span>
                    </div>
              }
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (bugs is not null)
           {
                <Virtualize Items="@bugs" Context="b" OverscanCount="10">
                    <div class="bug-entry">
                        <div class="@GetVoteClass(b)" @onclick="(() => VoteUp(b))">
                            <div class="text-uppercase">@GetUpvoteTopText(b)</div>
                            <span class="oi oi-caret-top entry-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText(b)</div>
                        </div>
                        <div class="bug-entry-text">
                            <div class="bug-entry-text-title" @onclick="(() => OpenDetails(b))">
                                @b.Bug
                            </div>
                            @if (archivingBug is null || archivingBug.Id != b.Id)
                                {
                                    <div class="bug-entry-bottom">
                                        <div class="bug-entry-category-text @GetBugCategoryClass(b)" @onclick="(() => OpenDetails(b))">
                                            @b.Category?.CategoryName
                                        </div>
                                        <AuthorizeView Policy="Admin">
                                            <button @onclick="(() => archivingBug = b)" class="btn btn-archive bug-entry-category-text">
                                                archive
                                            </button>
                                        </AuthorizeView>
                                    </div>
                                }
                              else
                                {
                                    <div class="bug-entry-bottom">
                                        <button class="btn btn-archive btn-archive-confirm" @onclick="ArchiveBug">
                                            confirm
                                        </button>
                                        <button class="btn btn-archive btn-archive-cancel" @onclick="(() => archivingBug = null)">
                                            cancel
                                        </button>
                                    </div>
                                }
                        </div>
                        <div class="bug-entry-status @GetBugStatusClass(b)">
                            <div class="bug-entry-status-text">
                                @b.BugStatus?.StatusName
                            </div>
                        </div>
                    </div>
                </Virtualize>
           }
    </div>

    <div class="col-md-4 col-xl-3 d-none d-md-block">
        @if (categories is not null)
           {
                <div class="categories">
                      <span class="text-uppercase fw-bold">Category</span>
                      <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">All</div>
                      @foreach (var c in categories)
                        {
                             <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                        }
                </div>
           }
        @if (statuses is not null)
           {
                <div class="statuses">
                      <span class="text-uppercase fw-bold">Status</span>
                      <div class="@GetSelectedStatus()" @onclick="(() => OnStatusClick())">All</div>
                      @foreach (var s in statuses)
                        {
                             <div class="@GetSelectedStatus(s.StatusName)" @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                        }
                </div>
           }
    </div>
</div>

@code {
     private UserModel loggedInUser;
     private List<BugModel> bugs;
     private List<CategoryModel> categories;
     private List<StatusModel> statuses;
     private BugModel archivingBug;

     private string selectedCategory = "All";
     private string selectedStatus = "All";
     private string searchText = "";
     private bool isSortedByNew = true;
     private bool showCategories = false;
     private bool showStatuses = false;

     protected async override Task OnInitializedAsync()
     {
          categories = await categoryData.GetAllCategories();
          statuses = await statusData.GetAllStatuses();
          await LoadAndVerifyUser();
     }

     private async Task ArchiveBug()
     {
          archivingBug.Archived = true;
          await bugData.UpdateBug(archivingBug);
          bugs.Remove(archivingBug);
          archivingBug = null;
          //await FilterBugs();
     }

     private void LoadReportPage()
     {
          if (loggedInUser is not null)
          {
               navManager.NavigateTo("/Report");
          }
          else
          {
               navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
          }
     }

     private async Task LoadAndVerifyUser()
     {
          var authState = await authProvider.GetAuthenticationStateAsync();
          string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

          if (string.IsNullOrWhiteSpace(objectId) == false)
          {
               loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

               string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
               string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
               string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
               string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

               bool isDirty = false;
               if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
               {
                    isDirty = true;
                    loggedInUser.ObjectIdentifier = objectId;
               }

               if (firstName.Equals(loggedInUser.FirstName) == false)
               {
                    isDirty = true;
                    loggedInUser.FirstName = firstName;
               }

               if (lastName.Equals(loggedInUser.LastName) == false)
               {
                    isDirty = true;
                    loggedInUser.LastName = lastName;
               }

               if (displayName.Equals(loggedInUser.DisplayName) == false)
               {
                    isDirty = true;
                    loggedInUser.DisplayName = displayName;
               }

               if (email.Equals(loggedInUser.EmailAddress) == false)
               {
                    isDirty = true;
                    loggedInUser.EmailAddress = email;
               }

               if (isDirty)
               {
                    if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                    {
                         await userData.CreateUser(loggedInUser);
                    }
                    else
                    {
                         await userData.UpdateUser(loggedInUser);
                    }
               }
          }
     }

     protected async override Task OnAfterRenderAsync(bool firstRender)
     {
          if (firstRender)
          {
               await LoadFilterState();
               await FilterBugs();
               StateHasChanged();
          }
     }

     private async Task LoadFilterState()
     {
          var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
          selectedCategory = stringResults.Success ? stringResults.Value : "All";

          stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
          selectedStatus = stringResults.Success ? stringResults.Value : "All";

          stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
          searchText = stringResults.Success ? stringResults.Value : "";

          var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
          isSortedByNew = boolResults.Success ? boolResults.Value : true;
     }

     private async Task SaveFilterState()
     {
          await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
          await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
          await sessionStorage.SetAsync(nameof(searchText), searchText);
          await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
     }

     private async Task FilterBugs()
     {
          var output = await bugData.GetAllAcceptedBugs();

          if (selectedCategory != "All")
          {
               output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
          }

          if (selectedStatus != "All")
          {
               output = output.Where(s => s.BugStatus?.StatusName == selectedStatus).ToList();
          }

          if (string.IsNullOrWhiteSpace(searchText) == false)
          {
               output = output.Where(s => s.Bug.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                    s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
          }

          if (isSortedByNew)
          {
               output = output.OrderByDescending(s => s.DateReported).ToList();
          }
          else
          {
               output = output.OrderByDescending(s => s.UserVotes.Count)
                                         .ThenByDescending(s => s.DateReported).ToList();
          }

          bugs = output;
          await SaveFilterState();
     }

     private async Task OrderByNew(bool isNew)
     {
          isSortedByNew = isNew;
          await FilterBugs();
     }

     private async Task OnSearchInput(string searchInput)
     {
          searchText = searchInput;
          await FilterBugs();
     }

     private async Task OnCategoryClick(string category = "All")
     {
          selectedCategory = category;
          showCategories = false;
          await FilterBugs();
     }

     private async Task OnStatusClick(string status = "All")
     {
          selectedStatus = status;
          showStatuses = false;
          await FilterBugs();
     }

     private async Task VoteUp(BugModel bug)
     {
          if (loggedInUser is not null)
          {
               if (bug.Author.Id == loggedInUser.Id)
               {
                    // Can't vote on your own suggestion
                    return;
               }

               if (bug.UserVotes.Add(loggedInUser.Id) == false)
               {
                    bug.UserVotes.Remove(loggedInUser.Id);
               }

               await bugData.UpvoteBug(bug.Id, loggedInUser.Id);

               if (isSortedByNew == false)
               {
                    bugs = bugs
                       .OrderByDescending(b => b.UserVotes.Count)
                       .ThenByDescending(b => b.DateReported).ToList();
               }
          }
          else
          {
               navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
          }
     }

     private string GetUpvoteTopText(BugModel bug)
     {
          if (bug.UserVotes?.Count > 0)
          {
               return bug.UserVotes.Count.ToString("00");
          }
          else
          {
               if (bug.Author.Id == loggedInUser?.Id)
               {
                    return "Awaiting";
               }
               else
               {
                    return "Click To";
               }
          }
     }

     private string GetUpvoteBottomText(BugModel bug)
     {
          if (bug.UserVotes?.Count > 1)
          {
               return "Upvotes";
          }
          else
          {
               return "Upvote";
          }
     }

     private void OpenDetails(BugModel bug)
     {
          navManager.NavigateTo($"/Details/{bug.Id}");
     }

     private string SortedByNewClass(bool isNew)
     {
          if (isNew == isSortedByNew)
          {
               return "sort-selected";
          }
          else
          {
               return "";
          }
     }

     private string GetVoteClass(BugModel bug)
     {
          if (bug.UserVotes is null || bug.UserVotes.Count == 0)
          {
               return "bug-entry-no-votes";
          }
          else if (bug.UserVotes.Contains(loggedInUser?.Id))
          {
               return "bug-entry-voted";
          }
          else
          {
               return "bug-entry-not-voted";
          }
     }

     private string GetBugCategoryClass(BugModel bug)
     {
          if (bug is null || bug.Category is null)
          {
               return "bug-entry-category-suggestion";
          }

          string output = bug.Category.CategoryName switch
          {
               "Low" => "bug-entry-category-low",
               "Medium" => "bug-entry-category-medium",
               "High" => "bug-entry-category-high",
               "Critical" => "bug-entry-category-critical",
               "Suggestion" => "bug-entry-category-suggestion",
               _ => "bug-entry-category-suggestion",
          };

          return output;
     }

     private string GetBugStatusClass(BugModel bug)
     {
          if (bug is null || bug.BugStatus is null)
          {
               return "bug-entry-status-none";
          }

          string output = bug.BugStatus.StatusName switch
          {
               "Resolved" => "bug-entry-status-resolved",
               "Open" => "bug-entry-status-open",
               "In Progress" => "bug-entry-status-in-progress",
               "Closed" => "bug-entry-status-closed",
               _ => "bug-entry-status-none",
          };

          return output;
     }

     private string GetSelectedCategory(string category = "All")
     {
          if (category == selectedCategory)
          {
               return "selected-category";
          }
          else
          {
               return "";
          }
     }

     private string GetSelectedStatus(string status = "All")
     {
          if (status == selectedStatus)
          {
               return "selected-status";
          }
          else
          {
               return "";
          }
     }
}