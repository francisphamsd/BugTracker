@page "/Details/{Id}"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IBugData bugData
@inject IStatusData statusData

<h1 class="page-heading text-uppercase mb-4">Bug Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (bug is not null)
           {
                <div class="row bug-detail-row">
                    <div class="col-11 bug-detail">
                        <div>
                            <div class="@GetVoteClass()" @onclick="VoteUp">
                                <div class="text-uppercase">@GetUpvoteTopText()</div>
                                <span class="oi oi-caret-top detail-upvote"></span>
                                <div class="text-uppercase">@GetUpvoteBottomText()</div>
                            </div>
                            <div class="bug-detail-date">
                                <div>@bug.DateReported.ToString("MM.dd.yyyy")</div>
                            </div>
                        </div>
                        <div class="bug-detail-text">
                            <div class="fw-bold mb-2 bug-detail-bug">@bug.Bug</div>
                            <div class="mb-2 bug-detail-author">@bug.Author.DisplayName</div>
                            <div class="mb-2 d-none d-md-block">@bug.Description</div>
                            <div class="bug-entry-category-text d-none-d-md-block @GetCategoryClass()">@bug.Category.CategoryName</div>
                        </div>
                    </div>
                    <div class="col-1 close-button-section">
                        <button class="btn btn-close" @onclick="ClosePage"></button>
                    </div>
                </div>
                <div class="row d-block d-md-none">
                    <div class="bug-detail-text">
                        <div>@bug.Description</div>
                        <div class="bug-entry-category-text">@bug.Category.CategoryName</div>
                    </div>
                </div>
           }
    </div>
</div>

@if (bug?.BugStatus is not null)
   {
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 bug-results form-layout">
                <div class="@GetStatusClass()"></div>
                <div class="bug-detail-status-section">
                    <div class="bug-detail-status fw-bold mb-2 bug-detail-bug">
                        @bug.BugStatus.StatusName
                    </div>
                    <div class="bug-detail-owner-notes">
                        @((MarkupString)bug.OwnerNotes)
                    </div>
                </div>
            </div>
        </div>
   }

@if (bug is not null)
   {
        <AuthorizeView Policy="Admin">
            <div class="row justify-content-center detail-form">
                <div class="col-xl-8 col-lg-10 form-layout admin-details">
                    <div>
                        <div class="bug-detail-status fw-bold mb-2 bug-detail-bug">
                            Set Status
                        </div>
                        @if (string.IsNullOrWhiteSpace(settingStatus))
                           {
                                  //(Resolved, Open, In Progress, Closed)
                                <div class="admin-set-statuses">
                                    <button @onclick="@(() => settingStatus = "resolved")"
                                        class="btn bug-entry-category-text btn-archive btn-status-resolved">
                                        resolved
                                    </button>
                                    <button @onclick="@(() => settingStatus = "open")"
                                        class="btn bug-entry-category-text btn-archive btn-status-open">
                                        open
                                    </button>
                                    <button @onclick="@(() => settingStatus = "in progress")"
                                        class="btn bug-entry-category-text btn-archive btn-status-in-progress">
                                        in progress
                                    </button>
                                    <button @onclick="@(() => settingStatus = "closed")"
                                        class="btn bug-entry-category-text btn-archive btn-status-closed">
                                        closed
                                    </button>
                                </div>
                           }
                          else if (settingStatus == "resolved")
                           {
                                <div>
                                    <input @bind="urlText"
                                        class="form-control rounded-control"
                                        type="text"
                                        placeholder="Url"
                                        aria-label="Content Url" />
                                </div>
                                <div class="bug-entry-bottom">
                                    <button class="btn btn-archive-confirm" @onclick="ResolveSetStatus">
                                        confirm
                                    </button>
                                    <button class="btn btn-archive-cancel" @onclick="(() => settingStatus = null)">
                                        cancel
                                    </button>
                                </div>
                           }
                          else
                           {
                                <div class="bug-entry-bottom">
                                    <button class="btn btn-archive-confirm" @onclick="ResolveSetStatus">
                                        confirm
                                    </button>
                                    <button class="btn btn-archive-cancel" @onclick="(() => settingStatus = null)">
                                        cancel
                                    </button>
                                </div>
                           }
                    </div>
                </div>
            </div>
        </AuthorizeView>
   }

@code {
     [Parameter]
     public string Id { get; set; }

     private BugModel bug;
     private UserModel loggedInUser;

     private List<StatusModel> statuses;
     private string settingStatus = "";
     private string urlText = "";

     protected async override Task OnInitializedAsync()
     {
          bug = await bugData.GetBug(Id);
          loggedInUser = await authProvider.GetUserFromAuth(userData);
          statuses = await statusData.GetAllStatuses();
     }

     private async Task ResolveSetStatus()
     {
          switch (settingStatus)
          {
               case "resolved":
                    if (string.IsNullOrWhiteSpace(urlText))
                    {
                         return;
                    }
                    bug.BugStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                    bug.OwnerNotes = $"This bug is fixed and updated. You can read the release note here: <a href='{urlText}' target='_blank'>{urlText}</a>";
                    break;

               case "open":
                    bug.BugStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                    bug.OwnerNotes = $"We are well aware of the bug. Our developers may work on it in future updates.";
                    break;

               case "in progress":
                    bug.BugStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                    bug.OwnerNotes = $"We are currently working on this bug. It will be fixed the next update.";
                    break;

               case "closed":
                    bug.BugStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                    bug.OwnerNotes = $"The report is incomplete, we are not able to replicate the bug on our end. Please provide more information and report it again.";
                    break;

               default:
                    return;
          }
          settingStatus = null;
          await bugData.UpdateBug(bug);
     }

     private void ClosePage()
     {
          navManager.NavigateTo("/");
     }

     private string GetUpvoteTopText()
     {
          if (bug.UserVotes?.Count > 0)
          {
               return bug.UserVotes.Count.ToString("00");
          }
          else
          {
               if (bug.Author.Id == loggedInUser?.Id)
               {
                    return "Awaiting";
               }
               else
               {
                    return "Click To";
               }
          }
     }

     private string GetUpvoteBottomText()
     {
          if (bug.UserVotes?.Count > 1)
          {
               return "Upvotes";
          }
          else
          {
               return "Upvote";
          }
     }

     private async Task VoteUp()
     {
          if (loggedInUser is not null)
          {
               if (bug.Author.Id == loggedInUser.Id)
               {
                    // Can't vote on your own suggestion
                    return;
               }

               if (bug.UserVotes.Add(loggedInUser.Id) == false)
               {
                    bug.UserVotes.Remove(loggedInUser.Id);
               }

               await bugData.UpvoteBug(bug.Id, loggedInUser.Id);
          }
          else
          {
               navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
          }
     }

     private string GetVoteClass()
     {
          if (bug.UserVotes is null || bug.UserVotes.Count == 0)
          {
               return "bug-detail-no-votes";
          }
          else if (bug.UserVotes.Contains(loggedInUser?.Id))
          {
               return "bug-detail-voted";
          }
          else
          {
               return "bug-detail-not-voted";
          }
     }

     private string GetCategoryClass()
     {
          if (bug is null || bug.Category is null)
          {
               return "bug-detail-category-suggestion";
          }

          string output = bug.Category.CategoryName switch
          {
               "Low" => "bug-detail-category-low",
               "Medium" => "bug-detail-category-medium",
               "High" => "bug-detail-category-high",
               "Critical" => "bug-detail-category-critical",
               "Suggestion" => "bug-detail-category-suggestion",
               _ => "bug-detail-category-suggestion",
          };

          return output;
     }

     private string GetStatusClass()
     {
          if (bug is null || bug.BugStatus is null)
          {
               return "bug-detail-status-none";
          }

          string output = bug.BugStatus.StatusName switch
          {
               "Resolved" => "bug-detail-status-resolved",
               "Open" => "bug-detail-status-open",
               "In Progress" => "bug-detail-status-in-progress",
               "Closed" => "bug-detail-status-closed",
               _ => "bug-detail-status-none",
          };

          return output;
     }
     }

